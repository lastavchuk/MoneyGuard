{"version":3,"file":"static/js/781.071fc484.chunk.js","mappings":"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","sources":["components/Forms/Registration/RegistrationFormStyled.js","pages/RegistrationPage/RegistrationPageStyled.js","components/Forms/Registration/RegistrationForm.jsx","pages/RegistrationPage/RegistrationPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const RegContainer = styled.div`\n    /* display: flex; */\n    /* justify-content: center; */\n    width: 100%;\n    height: 100vh;\n    border-radius: 8px;\n    /* form effects */\n    box-shadow: 0px 4px 60px 0px rgba(0, 0, 0, 0.25);\n\n    h1 {\n        /* display: flex; */\n        width: 182px;\n        height: 40.026px;\n        flex-direction: column;\n        justify-content: center;\n        font-family: Poppins;\n        font-size: 26.963px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: normal;\n        text-align: center;\n        margin-bottom: 10px;\n    }\n    @media only screen and (max-width: 767px) {\n    }\n    @media only screen and (min-width: 768px) {\n        box-shadow: rgba(0, 0, 0, 0.25) 0px 4px 60px 0px;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        margin: auto;\n        width: 533px;\n        height: 613px;\n        background: var(--form-color);\n        /* background: rgba(0, 0, 0, 0.3); */\n        backdrop-filter: blur(50px);\n    }\n`;\n\nexport const RegFormStyled = styled.form`\n    padding-top: 50px;\n    /* display: flex; */\n    flex-direction: column;\n    gap: 15px;\n    width: 280px;\n    margin: 0 auto;\n\n    input {\n        padding: 0 20px 8px;\n        cursor: pointer;\n        border: none;\n    }\n    h3 {\n        margin: 0 auto 40px;\n        color: var(--white, #fbfbfb);\n        font-size: 19px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: normal;\n    }\n\n    svg {\n        margin: 0 0 8px 0;\n    }\n\n    @media only screen and (min-width: 768px) {\n        \n        width: 409px;\n        h3 {\n        font-size: 27px;}\n\n        input {\n            height: 36px;\n            padding: 0 20px 8px;\n            box-sizing: border-box;\n        }\n\n        svg {\n            margin: 0px 0px 8px 0px;\n        }\n    }\n`;\n\nexport const NavBtn = styled.button`\n    color: var(--text-button, #623f8b);\n    width: 280px;\n    height: 50px;\n    flex-shrink: 0;\n    border-radius: 20px;\n    border: 1px solid #4a56e2;\n    background: #fcfcfc;\n    box-shadow: 1px 9px 15px 0px rgba(0, 0, 0, 0.2);\n\n    @media only screen and (min-width: 768px) {\n        width: 300px;\n        margin: 0 auto;\n        display: block;\n    }\n`;\nexport const Button = styled.button`\n    color: var(--white, #fbfbfb);\n    width: 280px;\n    height: 50px;\n    flex-shrink: 0;\n    transition: background-color 0.5s;\n    border-radius: 20px;\n    display: block;\n    background: var(\n        --button-gradient,\n        linear-gradient(167deg, #ffc727 0%, #9e40ba 61.46%, #7000ff 90.54%)\n    );\n    box-shadow: 1px 9px 15px 0px rgba(0, 0, 0, 0.2);\n    margin-bottom: 20px;\n    padding: 13px 112px;\n\n    @media only screen and (min-width: 768px) {\n        margin: 25px auto 20px;\n        width: 300px;\n\n        &.login {\n            margin: 5px auto 20px;\n        }\n    }\n`;\n","import styled from 'styled-components';\n\nimport backgroundMob from '../../assests/img/registr_mobile@1x.jpg';\nimport backgroundMob2 from '../../assests/img/registr_mobile@2x.jpg';\n\nimport backgroundTab from '../../assests/img/registr_tablet@1x.jpg';\nimport backgroundTab2 from '../../assests/img/registr_tablet@2x.jpg';\n\nimport backgroundDeck from '../../assests/img/registr_desktop@1x.jpg';\nimport backgroundDeck2 from '../../assests/img/registr_desktop@2x.jpg';\n\nexport const RegPageContainer = styled.div`\n  max-width: 100vw;\n  height: 100vh;\n  background-image: url(${backgroundMob});\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n\n  @media (min-device-pixel-ratio: 2),\n        (min-resolution: 192dpi),\n        (min-resolution: 2dppx) {\n        background-image: url(${backgroundMob2});\n    }\n\n    @media only screen and (max-width: 767px) {\n      backdrop-filter: blur(50px);\n}\n    @media only screen and (min-width: 768px) {\n        background-image: url(${backgroundTab});\n  \n        @media (min-device-pixel-ratio: 2),\n        (min-resolution: 192dpi),\n        (min-resolution: 2dppx) {\n        background-image: url(${backgroundTab2});\n    }\n    }\n\n    @media only screen and (min-width: 1280px){\n      background-image: url(${backgroundDeck});\n      @media (min-device-pixel-ratio: 2),\n        (min-resolution: 192dpi),\n        (min-resolution: 2dppx) {\n        background-image: url(${backgroundDeck2});\n    }\n    \n    }\n`;\n\nexport const LogoStyled = styled.div`    \n  width: 182px;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n  align-items: center; \n  \n`","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { useMediaQuery } from 'react-responsive';\n\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n    Button,\n    NavBtn,\n    RegContainer,\n    RegFormStyled,\n} from './RegistrationFormStyled';\nimport { LogoStyled } from 'pages/RegistrationPage/RegistrationPageStyled';\n\nimport Logotip from '../../../assests/img/logo.svg';\n\nimport { InputAdornment, TextField } from '@mui/material';\nimport AccountBoxIcon from '@mui/icons-material/AccountBox';\nimport EmailIcon from '@mui/icons-material/Email';\nimport LockIcon from '@mui/icons-material/Lock';\nimport PasswordStrengthBar from 'react-password-strength-bar';\nimport { registerUserThunk } from 'redux/auth/userThunks';\n\nimport { toast } from 'react-toastify';\n\nconst RegistrationForm = () => {\n    const dispatchEvent = useDispatch();\n\n    const isMobile = useMediaQuery({ query: '(max-width: 767px)' });\n\n    const validationSchema = Yup.object({\n        username: Yup.string()\n            .min(2, 'Must be at least 2 characters')\n            .max(20, 'Must be up to 20 characters')\n            .required('Required'),\n\n        email: Yup.string()\n            .email('Invalid email address')\n            .min(6, 'Must be at least 6 characters')\n            .max(25, 'Must be up to 25 characters')\n            .required('Required'),\n\n        password: Yup.string()\n            .min(6, 'Must be 6 characters or less')\n            .max(12, 'Must be up to 12 characters')\n            .required('Required')\n            .matches(\n                /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]),?[\\s\\S]{6,12}$/,\n                'Password must contain at least 6 characters, one uppercase letter, one lowercase letter, one number'\n            ),\n\n        password2: Yup.string()\n            .oneOf([Yup.ref('password'), null], 'Passwords must match')\n            .required('Confirm Password is required'),\n    });\n\n    return (\n        <RegContainer>\n            <Formik\n                initialValues={{\n                    username: '',\n                    email: '',\n                    password: '',\n                    password2: '',\n                }}\n                validationSchema={validationSchema}\n                onSubmit={({ username, password, email }, { resetForm }) => {\n                    dispatchEvent(\n                        registerUserThunk({ username, password, email })\n                    ).unwrap()\n                    .then(data => {\n                      resetForm();\n                      toast.success(\n                        `${data.user.username}, welcome to Money Guard!!!`\n                      );\n                    })\n                    .catch(error => {\n                      toast.error(error.message[0]);\n                    });\n                    resetForm();\n                }}\n            >\n                {formik => (\n                    <RegFormStyled\n                        onSubmit={formik.handleSubmit}\n                        autoComplete=\"off\"\n                    >\n                        <LogoStyled>\n                            <img\n                                src={Logotip}\n                                alt=\"Logo MoneyGuard\"\n                                width=\"36px\"\n                                height=\"36px\"\n                            />\n                            <h3>MoneyGuard</h3>\n                        </LogoStyled>\n                        {isMobile ? (\n                            <>\n                                <Field\n                                    as={TextField}\n                                    InputProps={{\n                                        inputProps: {\n                                            style: {\n                                                color: 'white',\n                                                stroke: 'none',\n                                            },\n                                        },\n                                        startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                                <EmailIcon\n                                                    style={{ color: 'grey' }}\n                                                />\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                    style={{\n                                        width: '100%',\n                                        color: 'white',\n                                        borderBottom: '1px solid #ffffff66',\n                                        marginBottom: '20px',\n                                        paddingLeft: '13px',\n                                    }}\n                                    variant=\"standard\"\n                                    name=\"email\"\n                                    type=\"email\"\n                                    label=\"\"\n                                    htmlFor=\"email\"\n                                    placeholder=\"E-mail\"\n                                    autoComplete=\"off\"\n                                    onChange={formik.handleChange}\n                                    error={Boolean(formik.errors.email)}\n                                    helperText={\n                                        formik.errors.email &&\n                                        'Please enter a valid email address'\n                                    }\n                                />\n\n                                <Field\n                                    as={TextField}\n                                    InputProps={{\n                                        inputProps: {\n                                            style: {\n                                                color: 'white',\n                                                stroke: 'none',\n                                            },\n                                        },\n                                        startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                                <LockIcon\n                                                    style={{ color: 'grey' }}\n                                                />\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                    style={{\n                                        width: '100%',\n                                        color: 'white',\n                                        borderBottom: '1px solid #ffffff66',\n                                        marginBottom: '20px',\n                                        paddingLeft: '13px',\n                                    }}\n                                    variant=\"standard\"\n                                    name=\"password\"\n                                    type=\"password\"\n                                    label=\"\"\n                                    htmlFor=\"password\"\n                                    placeholder=\"Password\"\n                                    autoComplete=\"off\"\n                                    onChange={formik.handleChange}\n                                    error={Boolean(formik.errors.password)}\n                                    helperText={\n                                        formik.errors.password &&\n                                        'Password must contain one uppercase letter, one lowercase letter, one number'\n                                    }\n                                />\n\n                                <Field\n                                    as={TextField}\n                                    InputProps={{\n                                        inputProps: {\n                                            style: {\n                                                color: 'white',\n                                                stroke: 'none',\n                                            },\n                                        },\n                                        startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                                <LockIcon\n                                                    style={{ color: 'grey' }}\n                                                />\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                    style={{\n                                        width: '100%',\n                                        color: 'white',\n                                        borderBottom: '1px solid #ffffff66',\n                                        paddingLeft: '13px',\n                                    }}\n                                    variant=\"standard\"\n                                    name=\"password2\"\n                                    type=\"password\"\n                                    label=\"\"\n                                    htmlFor=\"password2\"\n                                    placeholder=\"Confirm password\"\n                                    autoComplete=\"off\"\n                                    onChange={formik.handleChange}\n                                    error={Boolean(\n                                        formik.errors.confirmPassword\n                                    )}\n                                    helperText={\n                                        formik.errors.confirmPassword &&\n                                        'Please enter your valid password'\n                                    }\n                                />\n                                <PasswordStrengthBar\n                                    password={formik.values.password}\n                                    minLength={2}\n                                    maxLength={12}\n                                />\n                                {formik.values.password !==\n                                    formik.values.password2 && (\n                                    <span style={{ color: 'red' }}>\n                                        Passwords do not match!!!\n                                    </span>\n                                )}\n                                <Field\n                                    as={TextField}\n                                    InputProps={{\n                                        inputProps: {\n                                            style: {\n                                                color: 'white',\n                                                stroke: 'none',\n                                            },\n                                        },\n                                        startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                                <AccountBoxIcon\n                                                    style={{ color: 'grey' }}\n                                                />\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                    style={{\n                                        width: '100%',\n                                        color: 'white',\n                                        borderBottom: '1px solid #ffffff66',\n                                        marginBottom: '40px',\n                                        paddingLeft: '13px',\n                                    }}\n                                    variant=\"standard\"\n                                    name=\"username\"\n                                    autoComplete=\"off\"\n                                    type=\"text\"\n                                    label=\"\"\n                                    htmlFor=\"username\"\n                                    placeholder=\"First name\"\n                                    onChange={formik.handleChange}\n                                    error={Boolean(formik.errors.username)}\n                                    helperText={\n                                        formik.errors.username &&\n                                        'Please enter your name'\n                                    }\n                                />\n                            </>\n                        ) : (\n                            <>\n                                <Field\n                                    as={TextField}\n                                    InputProps={{\n                                        inputProps: {\n                                            style: {\n                                                color: 'white',\n                                                stroke: 'none',\n                                            },\n                                        },\n                                        startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                                <AccountBoxIcon\n                                                    style={{ color: 'grey' }}\n                                                />\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                    style={{\n                                        width: '100%',\n                                        color: 'white',\n                                        borderBottom: '1px solid #ffffff66',\n                                        marginBottom: '10px',\n                                        paddingLeft: '12px',\n                                    }}\n                                    variant=\"standard\"\n                                    name=\"username\"\n                                    className=\"username\"\n                                    autoComplete=\"off\"\n                                    type=\"text\"\n                                    label=\"\"\n                                    htmlFor=\"username\"\n                                    placeholder=\"Name\"\n                                    onChange={formik.handleChange}\n                                    error={Boolean(formik.errors.username)}\n                                    helperText={\n                                        formik.errors.username &&\n                                        'Please enter your name'\n                                    }\n                                />\n\n                                <Field\n                                    as={TextField}\n                                    InputProps={{\n                                        inputProps: {\n                                            style: {\n                                                color: 'white',\n                                                stroke: 'none',\n                                            },\n                                        },\n                                        startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                                <EmailIcon\n                                                    style={{ color: 'grey' }}\n                                                />\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                    style={{\n                                        width: '100%',\n                                        color: 'white',\n                                        borderBottom: '1px solid #ffffff66',\n                                        marginBottom: '10px',\n                                        paddingLeft: '12px',\n                                    }}\n                                    variant=\"standard\"\n                                    name=\"email\"\n                                    type=\"email\"\n                                    label=\"\"\n                                    htmlFor=\"email\"\n                                    placeholder=\"E-mail\"\n                                    autoComplete=\"off\"\n                                    onChange={formik.handleChange}\n                                    error={Boolean(formik.errors.email)}\n                                    helperText={\n                                        formik.errors.email &&\n                                        'Please enter a valid email address'\n                                    }\n                                />\n\n                                <Field\n                                    as={TextField}\n                                    InputProps={{\n                                        inputProps: {\n                                            style: {\n                                                color: 'white',\n                                                stroke: 'none',\n                                            },\n                                        },\n                                        startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                                <LockIcon\n                                                    style={{ color: 'grey' }}\n                                                />\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                    style={{\n                                        width: '100%',\n                                        color: 'white',\n                                        borderBottom: '1px solid #ffffff66',\n                                        marginBottom: '10px',\n                                        paddingLeft: '12px',\n                                    }}\n                                    variant=\"standard\"\n                                    name=\"password\"\n                                    type=\"password\"\n                                    label=\"\"\n                                    htmlFor=\"password\"\n                                    placeholder=\"Password\"\n                                    autoComplete=\"off\"\n                                    onChange={formik.handleChange}\n                                    error={Boolean(formik.errors.password)}\n                                    helperText={\n                                        formik.errors.password &&\n                                        'Password must contain at least 6 and up to 12 characters'\n                                    }\n                                \n                                />\n\n                                <Field\n                                    as={TextField}\n                                    InputProps={{\n                                        inputProps: {\n                                            style: {\n                                                color: 'white',\n                                                stroke: 'none',\n                                            },\n                                        },\n                                        startAdornment: (\n                                            <InputAdornment position=\"start\">\n                                                <LockIcon\n                                                    style={{ color: 'grey' }}\n                                                />\n                                            </InputAdornment>\n                                        ),\n                                    }}\n                                    style={{\n                                        width: '100%',\n                                        color: 'white',\n                                        borderBottom: '1px solid #ffffff66',\n                                        paddingLeft: '12px',\n                                        outline: 'green',\n                                    }}\n                                    variant=\"standard\"\n                                    name=\"password2\"\n                                    type=\"password\"\n                                    label=\"\"\n                                    htmlFor=\"password2\"\n                                    placeholder=\"Confirm password\"\n                                    autoComplete=\"off\"\n                                    onChange={formik.handleChange}\n                                    error={Boolean(\n                                        formik.errors.confirmPassword\n                                    )}\n                                    helperText={\n                                        formik.errors.confirmPassword &&\n                                        'Please enter your valid password'\n                                    }\n                                />\n                                <PasswordStrengthBar\n                                    password={formik.values.password}\n                                    minLength={2}\n                                    maxLength={12}\n                                />\n                                {formik.values.password !==\n                                    formik.values.password2 && (\n                                    <span style={{ color: 'red' }}>\n                                        Passwords do not match!!!\n                                    </span>\n                                )}\n                            </>\n                        )}\n\n                        <Button\n                            type=\"submit\"\n                            disabled={\n                                formik.values.password !==\n                                formik.values.password2\n                            }\n                        >\n                            REGISTER\n                        </Button>\n                        <Link to=\"/login\">\n                            <NavBtn>LOG IN</NavBtn>\n                        </Link>\n                    </RegFormStyled>\n                )}\n            </Formik>\n        </RegContainer>\n    );\n};\nexport default RegistrationForm;\n","import React from 'react';\nimport RegistrationForm from 'components/Forms/Registration/RegistrationForm';\nimport { RegPageContainer } from './RegistrationPageStyled';\n\n\nfunction RegistrationPage() {\n   \n    return (\n        <RegPageContainer>\n            <RegistrationForm />\n        </RegPageContainer>\n    );\n}\n\nexport default RegistrationPage;\n"],"names":["RegContainer","styled","_templateObject","_taggedTemplateLiteral","RegFormStyled","_templateObject2","NavBtn","_templateObject3","Button","_templateObject4","RegPageContainer","backgroundTab","backgroundTab2","backgroundDeck","backgroundDeck2","LogoStyled","dispatchEvent","useDispatch","isMobile","useMediaQuery","query","validationSchema","Yup","username","min","max","required","email","password","matches","password2","oneOf","_jsx","children","Formik","initialValues","onSubmit","_ref","_ref2","resetForm","registerUserThunk","unwrap","then","data","toast","concat","user","catch","error","message","formik","_jsxs","handleSubmit","autoComplete","src","Logotip","alt","width","height","_Fragment","Field","as","TextField","InputProps","inputProps","style","color","stroke","startAdornment","InputAdornment","position","EmailIcon","borderBottom","marginBottom","paddingLeft","variant","name","type","label","htmlFor","placeholder","onChange","handleChange","Boolean","errors","helperText","LockIcon","confirmPassword","PasswordStrengthBar","values","minLength","maxLength","AccountBoxIcon","className","outline","disabled","Link","to","RegistrationForm"],"sourceRoot":""}