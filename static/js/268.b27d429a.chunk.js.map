{"version":3,"file":"static/js/268.b27d429a.chunk.js","mappings":"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","sources":["components/Forms/Registration/RegistrationFormStyled.js","components/Forms/Login/LoginFormStyled.js","components/Forms/Login/LoginForm.jsx","pages/LoginPage/LoginPageStyled.js","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const RegContainer = styled.div`\n    /* display: flex; */\n    /* justify-content: center; */\n    width: 100%;\n    height: 100vh;\n    border-radius: 8px;\n    /* form effects */\n    box-shadow: 0px 4px 60px 0px rgba(0, 0, 0, 0.25);\n\n    h1 {\n        /* display: flex; */\n        width: 182px;\n        height: 40.026px;\n        flex-direction: column;\n        justify-content: center;\n        font-family: Poppins;\n        font-size: 26.963px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: normal;\n        text-align: center;\n        margin-bottom: 10px;\n    }\n    @media only screen and (max-width: 767px) {\n    }\n    @media only screen and (min-width: 768px) {\n        box-shadow: rgba(0, 0, 0, 0.25) 0px 4px 60px 0px;\n        position: absolute;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        margin: auto;\n        width: 533px;\n        height: 613px;\n        background: var(--form-color);\n        /* background: rgba(0, 0, 0, 0.3); */\n        backdrop-filter: blur(50px);\n    }\n`;\n\nexport const RegFormStyled = styled.form`\n    padding-top: 50px;\n    /* display: flex; */\n    flex-direction: column;\n    gap: 15px;\n    width: 280px;\n    margin: 0 auto;\n\n    input {\n        padding: 0 20px 8px;\n        cursor: pointer;\n        border: none;\n    }\n    h3 {\n        margin: 0 auto 40px;\n        color: var(--white, #fbfbfb);\n        font-size: 19px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: normal;\n    }\n\n    svg {\n        margin: 0 0 8px 0;\n    }\n\n    @media only screen and (min-width: 768px) {\n        \n        width: 409px;\n        h3 {\n        font-size: 27px;}\n\n        input {\n            height: 36px;\n            padding: 0 20px 8px;\n            box-sizing: border-box;\n        }\n\n        svg {\n            margin: 0px 0px 8px 0px;\n        }\n    }\n`;\n\nexport const NavBtn = styled.button`\n    color: var(--text-button, #623f8b);\n    width: 280px;\n    height: 50px;\n    flex-shrink: 0;\n    border-radius: 20px;\n    border: 1px solid #4a56e2;\n    background: #fcfcfc;\n    box-shadow: 1px 9px 15px 0px rgba(0, 0, 0, 0.2);\n\n    @media only screen and (min-width: 768px) {\n        width: 300px;\n        margin: 0 auto;\n        display: block;\n    }\n`;\nexport const Button = styled.button`\n    color: var(--white, #fbfbfb);\n    width: 280px;\n    height: 50px;\n    flex-shrink: 0;\n    transition: background-color 0.5s;\n    border-radius: 20px;\n    display: block;\n    background: var(\n        --button-gradient,\n        linear-gradient(167deg, #ffc727 0%, #9e40ba 61.46%, #7000ff 90.54%)\n    );\n    box-shadow: 1px 9px 15px 0px rgba(0, 0, 0, 0.2);\n    margin-bottom: 20px;\n    padding: 13px 112px;\n\n    @media only screen and (min-width: 768px) {\n        margin: 25px auto 20px;\n        width: 300px;\n\n        &.login {\n            margin: 5px auto 20px;\n        }\n    }\n`;\n","import styled from 'styled-components';\nimport ellipse from '../../../assests/img/ellipse_desk@1x.png'\nimport ellipse2 from '../../../assests/img/ellipse_19desk@2x.png'\n\nexport const LogContainer = styled.div`\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    margin: auto;\n    display: flex;\n    justify-content: center;\n    width: 100vw;\n    height: 100vh;\n    border-radius: 8px;\n    /* background-color: var(--background); */\n\n    /* form effects */\n    box-shadow: 0px 4px 60px 0px rgba(0, 0, 0, 0.25);\n    /* backdrop-filter: blur(50px); */\n    /* background: var(--form-color); */\n\n    h1 {\n        display: flex;\n        width: 182px;\n        height: 40.026px;\n        flex-direction: column;\n        justify-content: center;\n        /* color: var(--white, #fbfbfb); */\n        font-size: 26.963px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: normal;\n        text-align: center;\n        margin-bottom: 10px;\n    }\n\n    @media only screen and (min-width: 768px) {\n        width: 533px;\n        height: 570px;\n        background: var(--form-color);\n        backdrop-filter: blur(50px);\n        background-image: url(${ellipse});\n        background-size: cover;\n        background-position: center;\n        background-repeat: no-repeat;\n\n      @media (min-device-pixel-ratio: 2),\n        (min-resolution: 192dpi),\n        (min-resolution: 2dppx) {\n        background-image: url(${ellipse2});\n    }\n    \n    }\n    \n`;\nexport const LogFormStyled = styled.form`\nwidth: 280px;\n\ninput {\n    /* padding: 10px 15px; */\n    padding: 0 0 8px;\n    height: 36px;\n    cursor: pointer;\n    border: none;\n    box-sizing: border-box;\n}\n\nsvg {\n    margin: 0 20px 8px 0;\n}\n\n@media only screen and (max-width: 767px) {\n}\n@media only screen and (min-width: 768px) {\n    padding-top: 80px;\n    width: 409px;\n    \n    }\n`;\nexport const LogotipStyled = styled.div`\n    margin-top: 97px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    \n    h3 {\n        margin: 0 auto 52px;\n        color: var(--white, #fbfbfb);\n        font-size: 19px;\n        font-style: normal;\n        font-weight: 400;\n        line-height: normal;\n    }\n    @media only screen and (min-width: 768px) {\n        h3{\n            font-size: 27px;\n\n        }\n        margin: 0 auto;\n        width: 182px;\n    }\n`;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { loginUserThunk } from 'redux/auth/userThunks';\nimport { Link } from 'react-router-dom';\n\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { toast } from 'react-toastify';\n\nimport { Button, NavBtn } from '../Registration/RegistrationFormStyled';\nimport { LogContainer, LogFormStyled, LogotipStyled } from './LoginFormStyled';\n\nimport InputAdornment from '@mui/material/InputAdornment';\nimport TextField from '@mui/material/TextField';\nimport EmailIcon from '@mui/icons-material/Email';\nimport LockIcon from '@mui/icons-material/Lock';\n\nimport Logotip from '../../../assests/img/logo.svg';\n\nconst LoginForm = () => {\n    const dispatchEvent = useDispatch();\n\n    const validationSchema = Yup.object({\n        email: Yup.string()\n            .email('Invalid email address')\n            .min(6, 'Must be at least 6 characters')\n            .max(25, 'Must be up to 25 characters')\n            .required('Required'),\n\n        password: Yup.string()\n            .min(6, 'Must be 6 characters or less')\n            .max(12, 'Must be up to 12 characters')\n            .required('Required')\n            .matches(\n                /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]),?[\\s\\S]{6,12}$/,\n                'Password must contain at least 6 characters, one uppercase letter, one lowercase letter, one number'\n            ),\n    });\n    return (\n        <LogContainer>\n            <Formik\n                initialValues={{ email: '', password: '' }}\n                validationSchema={validationSchema}\n                onSubmit={(values, { resetForm }) => {\n                    dispatchEvent(loginUserThunk(values))\n                        .unwrap()\n                        .then(data => {\n                            resetForm();\n                            toast.success(\n                                `${data.user.username}! You have successfully logged in.`\n                            );\n                        })\n                        .catch(error => {\n                            toast.error(error.message[0]);\n                        });\n                }}\n            >\n                {formik => (\n                    <LogFormStyled onSubmit={formik.handleSubmit}>\n                        <LogotipStyled>\n                            <img\n                                src={Logotip}\n                                alt=\"Logo MoneyGuard\"\n                                width=\"36px\"\n                                height=\"36px\"\n                            />\n                            <h3>MoneyGuard</h3>\n                        </LogotipStyled>\n                        <Field\n                            as={TextField}\n                            InputProps={{\n                                inputProps: {\n                                    style: { color: 'white', stroke: 'none' },\n                                },\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <EmailIcon style={{ color: 'grey' }} />\n                                    </InputAdornment>\n                                ),\n                            }}\n                            style={{\n                                width: '100%',\n                                color: 'white',\n                                borderBottom: '1px solid #ffffff66',\n                                marginBottom: '40px',\n                                paddingLeft: '10px',\n                            }}\n                            variant=\"standard\"\n                            name=\"email\"\n                            type=\"email\"\n                            label=\"\"\n                            placeholder=\"E-mail\"\n                            autoComplete=\"off\"\n                            onChange={formik.handleChange}\n                            error={Boolean(formik.errors.email)}\n                            helperText={\n                                formik.errors.email &&\n                                'Please enter your email address'\n                            }\n                        />\n\n                        <Field\n                            as={TextField}\n                            InputProps={{\n                                inputProps: {\n                                    style: { color: 'white', stroke: 'none' },\n                                },\n                                startAdornment: (\n                                    <InputAdornment position=\"start\">\n                                        <LockIcon style={{ color: 'grey' }} />\n                                    </InputAdornment>\n                                ),\n                            }}\n                            style={{\n                                width: '100%',\n                                color: 'white',\n                                borderBottom: '1px solid #ffffff66',\n                                paddingLeft: '10px',\n                                marginBottom: '40px',\n                            }}\n                            variant=\"standard\"\n                            name=\"password\"\n                            type=\"password\"\n                            label=\"\"\n                            placeholder=\"Password\"\n                            autoComplete=\"off\"\n                            onChange={formik.handleChange}\n                            error={Boolean(formik.errors.password)}\n                            helperText={\n                                formik.errors.password &&\n                                'Please enter your password'\n                            }\n                        />\n\n                        <Button type=\"submit\" className=\"login\">\n                            LOG IN\n                        </Button>\n\n                        <Link to=\"/register\">\n                            <NavBtn>REGISTER</NavBtn>\n                        </Link>\n                    </LogFormStyled>\n                )}\n            </Formik>\n        </LogContainer>\n    );\n};\nexport default LoginForm;\n","import styled from 'styled-components';\n\nimport backgroundMob from '../../assests/img/login_mob@1x.jpg';\nimport backgroundMob2 from '../../assests/img/login_mob@2x.jpg';\n\nimport backgroundTab from '../../assests/img/login_tab@1x.jpg';\nimport backgroundTab2 from '../../assests/img/login_tab@2x.jpg';\n\nimport backgroundDesk from '../../assests/img/login_deskt@1x.jpg';\nimport backgroundDesk2 from '../../assests/img/login_deskt@2x.jpg';\n\nexport const LoginPageContainer = styled.div`\n    width: 100vw;\n    height: 100vh;\n    background-image: url(${backgroundMob });\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n   \n    @media (min-device-pixel-ratio: 2),\n        (min-resolution: 192dpi),\n        (min-resolution: 2dppx) {\n        background-image: url(${backgroundMob2});\n    }\n\n    @media only screen and (max-width: 767px) {\n      backdrop-filter: blur(50px);\n}\n    @media only screen and (min-width: 768px) {\n        background-image: url(${backgroundTab});\n \n\n        @media (min-device-pixel-ratio: 2),\n        (min-resolution: 192dpi),\n        (min-resolution: 2dppx) {\n        background-image: url(${backgroundTab2});\n    }\n    }\n    @media only screen and (min-width: 1280px){\n      background-image: url(${backgroundDesk});\n      @media (min-device-pixel-ratio: 2),\n        (min-resolution: 192dpi),\n        (min-resolution: 2dppx) {\n        background-image: url(${backgroundDesk2});\n    }\n    \n    }\n`;\n\n\n","import React, { useEffect } from 'react';\nimport LoginForm from 'components/Forms/Login/LoginForm';\nimport { LoginPageContainer } from './LoginPageStyled';\nimport { toast } from 'react-toastify';\nimport { useSelector } from 'react-redux';\nimport { selectError } from 'redux/selectors';\n\nfunction LoginPage() {\n    const error = useSelector(selectError);\n\n    useEffect(() =>{\n        if (error) {\n            toast.info(error.message);\n        }\n      },[error])\n\n    return (\n        <LoginPageContainer>\n            <LoginForm />\n        </LoginPageContainer>\n    );\n}\n\nexport default LoginPage;\n"],"names":["RegContainer","styled","_templateObject","_taggedTemplateLiteral","RegFormStyled","_templateObject2","NavBtn","_templateObject3","Button","_templateObject4","LogContainer","ellipse","ellipse2","LogFormStyled","LogotipStyled","dispatchEvent","useDispatch","validationSchema","Yup","email","min","max","required","password","matches","_jsx","children","Formik","initialValues","onSubmit","values","_ref","resetForm","loginUserThunk","unwrap","then","data","toast","concat","user","username","catch","error","message","formik","_jsxs","handleSubmit","src","Logotip","alt","width","height","Field","as","TextField","InputProps","inputProps","style","color","stroke","startAdornment","InputAdornment","position","EmailIcon","borderBottom","marginBottom","paddingLeft","variant","name","type","label","placeholder","autoComplete","onChange","handleChange","Boolean","errors","helperText","LockIcon","className","Link","to","LoginPageContainer","backgroundTab","backgroundTab2","backgroundDesk","backgroundDesk2","useSelector","selectError","useEffect","LoginForm"],"sourceRoot":""}